// Code generated by MockGen. DO NOT EDIT.
// Source: internal/processor/port/port.go
//
// Generated by this command:
//
//	mockgen -source=internal/processor/port/port.go -destination=internal/processor/port/port_mock.go -package=port
//

// Package port is a generated GoMock package.
package port

import (
	context "context"
	reflect "reflect"

	v5 "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockMangler is a mock of Mangler interface.
type MockMangler struct {
	ctrl     *gomock.Controller
	recorder *MockManglerMockRecorder
	isgomock struct{}
}

// MockManglerMockRecorder is the mock recorder for MockMangler.
type MockManglerMockRecorder struct {
	mock *MockMangler
}

// NewMockMangler creates a new mock instance.
func NewMockMangler(ctrl *gomock.Controller) *MockMangler {
	mock := &MockMangler{ctrl: ctrl}
	mock.recorder = &MockManglerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMangler) EXPECT() *MockManglerMockRecorder {
	return m.recorder
}

// Mangle mocks base method.
func (m *MockMangler) Mangle(ctx context.Context, chatID, msg string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mangle", ctx, chatID, msg)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mangle indicates an expected call of Mangle.
func (mr *MockManglerMockRecorder) Mangle(ctx, chatID, msg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mangle", reflect.TypeOf((*MockMangler)(nil).Mangle), ctx, chatID, msg)
}

// MockWordsProvider is a mock of WordsProvider interface.
type MockWordsProvider struct {
	ctrl     *gomock.Controller
	recorder *MockWordsProviderMockRecorder
	isgomock struct{}
}

// MockWordsProviderMockRecorder is the mock recorder for MockWordsProvider.
type MockWordsProviderMockRecorder struct {
	mock *MockWordsProvider
}

// NewMockWordsProvider creates a new mock instance.
func NewMockWordsProvider(ctrl *gomock.Controller) *MockWordsProvider {
	mock := &MockWordsProvider{ctrl: ctrl}
	mock.recorder = &MockWordsProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWordsProvider) EXPECT() *MockWordsProviderMockRecorder {
	return m.recorder
}

// ChatWords mocks base method.
func (m *MockWordsProvider) ChatWords(ctx context.Context, chatID string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChatWords", ctx, chatID)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChatWords indicates an expected call of ChatWords.
func (mr *MockWordsProviderMockRecorder) ChatWords(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChatWords", reflect.TypeOf((*MockWordsProvider)(nil).ChatWords), ctx, chatID)
}

// InitialWords mocks base method.
func (m *MockWordsProvider) InitialWords() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWords")
	ret0, _ := ret[0].([]string)
	return ret0
}

// InitialWords indicates an expected call of InitialWords.
func (mr *MockWordsProviderMockRecorder) InitialWords() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWords", reflect.TypeOf((*MockWordsProvider)(nil).InitialWords))
}

// MockWordsUpdater is a mock of WordsUpdater interface.
type MockWordsUpdater struct {
	ctrl     *gomock.Controller
	recorder *MockWordsUpdaterMockRecorder
	isgomock struct{}
}

// MockWordsUpdaterMockRecorder is the mock recorder for MockWordsUpdater.
type MockWordsUpdaterMockRecorder struct {
	mock *MockWordsUpdater
}

// NewMockWordsUpdater creates a new mock instance.
func NewMockWordsUpdater(ctrl *gomock.Controller) *MockWordsUpdater {
	mock := &MockWordsUpdater{ctrl: ctrl}
	mock.recorder = &MockWordsUpdaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWordsUpdater) EXPECT() *MockWordsUpdaterMockRecorder {
	return m.recorder
}

// AddWord mocks base method.
func (m *MockWordsUpdater) AddWord(ctx context.Context, chatID, word string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWord", ctx, chatID, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWord indicates an expected call of AddWord.
func (mr *MockWordsUpdaterMockRecorder) AddWord(ctx, chatID, word any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWord", reflect.TypeOf((*MockWordsUpdater)(nil).AddWord), ctx, chatID, word)
}

// ClearWords mocks base method.
func (m *MockWordsUpdater) ClearWords(ctx context.Context, chatID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearWords", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearWords indicates an expected call of ClearWords.
func (mr *MockWordsUpdaterMockRecorder) ClearWords(ctx, chatID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearWords", reflect.TypeOf((*MockWordsUpdater)(nil).ClearWords), ctx, chatID)
}

// CreateChatWords mocks base method.
func (m *MockWordsUpdater) CreateChatWords(ctx context.Context, chatID string, words []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateChatWords", ctx, chatID, words)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateChatWords indicates an expected call of CreateChatWords.
func (mr *MockWordsUpdaterMockRecorder) CreateChatWords(ctx, chatID, words any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateChatWords", reflect.TypeOf((*MockWordsUpdater)(nil).CreateChatWords), ctx, chatID, words)
}

// IsNothingUpdatedError mocks base method.
func (m *MockWordsUpdater) IsNothingUpdatedError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNothingUpdatedError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNothingUpdatedError indicates an expected call of IsNothingUpdatedError.
func (mr *MockWordsUpdaterMockRecorder) IsNothingUpdatedError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNothingUpdatedError", reflect.TypeOf((*MockWordsUpdater)(nil).IsNothingUpdatedError), err)
}

// RemoveWord mocks base method.
func (m *MockWordsUpdater) RemoveWord(ctx context.Context, chatID, word string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveWord", ctx, chatID, word)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveWord indicates an expected call of RemoveWord.
func (mr *MockWordsUpdaterMockRecorder) RemoveWord(ctx, chatID, word any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveWord", reflect.TypeOf((*MockWordsUpdater)(nil).RemoveWord), ctx, chatID, word)
}

// MockPermissionChecker is a mock of PermissionChecker interface.
type MockPermissionChecker struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionCheckerMockRecorder
	isgomock struct{}
}

// MockPermissionCheckerMockRecorder is the mock recorder for MockPermissionChecker.
type MockPermissionCheckerMockRecorder struct {
	mock *MockPermissionChecker
}

// NewMockPermissionChecker creates a new mock instance.
func NewMockPermissionChecker(ctrl *gomock.Controller) *MockPermissionChecker {
	mock := &MockPermissionChecker{ctrl: ctrl}
	mock.recorder = &MockPermissionCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionChecker) EXPECT() *MockPermissionCheckerMockRecorder {
	return m.recorder
}

// IsAdmin mocks base method.
func (m *MockPermissionChecker) IsAdmin(ctx context.Context, chatID, userID int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAdmin", ctx, chatID, userID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAdmin indicates an expected call of IsAdmin.
func (mr *MockPermissionCheckerMockRecorder) IsAdmin(ctx, chatID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAdmin", reflect.TypeOf((*MockPermissionChecker)(nil).IsAdmin), ctx, chatID, userID)
}

// UserInfo mocks base method.
func (m *MockPermissionChecker) UserInfo(ctx context.Context, chatID, userID int64) (*v5.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserInfo", ctx, chatID, userID)
	ret0, _ := ret[0].(*v5.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserInfo indicates an expected call of UserInfo.
func (mr *MockPermissionCheckerMockRecorder) UserInfo(ctx, chatID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserInfo", reflect.TypeOf((*MockPermissionChecker)(nil).UserInfo), ctx, chatID, userID)
}

// MockCommandStorage is a mock of CommandStorage interface.
type MockCommandStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCommandStorageMockRecorder
	isgomock struct{}
}

// MockCommandStorageMockRecorder is the mock recorder for MockCommandStorage.
type MockCommandStorageMockRecorder struct {
	mock *MockCommandStorage
}

// NewMockCommandStorage creates a new mock instance.
func NewMockCommandStorage(ctrl *gomock.Controller) *MockCommandStorage {
	mock := &MockCommandStorage{ctrl: ctrl}
	mock.recorder = &MockCommandStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCommandStorage) EXPECT() *MockCommandStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCommandStorage) Get(ctx context.Context, id string) (Command, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, id)
	ret0, _ := ret[0].(Command)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCommandStorageMockRecorder) Get(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCommandStorage)(nil).Get), ctx, id)
}

// IsNotFoundError mocks base method.
func (m *MockCommandStorage) IsNotFoundError(err error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotFoundError", err)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotFoundError indicates an expected call of IsNotFoundError.
func (mr *MockCommandStorageMockRecorder) IsNotFoundError(err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotFoundError", reflect.TypeOf((*MockCommandStorage)(nil).IsNotFoundError), err)
}

// Set mocks base method.
func (m *MockCommandStorage) Set(ctx context.Context, id string, command Command) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, id, command)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockCommandStorageMockRecorder) Set(ctx, id, command any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockCommandStorage)(nil).Set), ctx, id, command)
}

// MockBanProcessor is a mock of BanProcessor interface.
type MockBanProcessor struct {
	ctrl     *gomock.Controller
	recorder *MockBanProcessorMockRecorder
	isgomock struct{}
}

// MockBanProcessorMockRecorder is the mock recorder for MockBanProcessor.
type MockBanProcessorMockRecorder struct {
	mock *MockBanProcessor
}

// NewMockBanProcessor creates a new mock instance.
func NewMockBanProcessor(ctrl *gomock.Controller) *MockBanProcessor {
	mock := &MockBanProcessor{ctrl: ctrl}
	mock.recorder = &MockBanProcessorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBanProcessor) EXPECT() *MockBanProcessorMockRecorder {
	return m.recorder
}

// AddViolation mocks base method.
func (m *MockBanProcessor) AddViolation(ctx context.Context, id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddViolation", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddViolation indicates an expected call of AddViolation.
func (mr *MockBanProcessorMockRecorder) AddViolation(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddViolation", reflect.TypeOf((*MockBanProcessor)(nil).AddViolation), ctx, id)
}

// IsBanned mocks base method.
func (m *MockBanProcessor) IsBanned(ctx context.Context, id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsBanned", ctx, id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsBanned indicates an expected call of IsBanned.
func (mr *MockBanProcessorMockRecorder) IsBanned(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsBanned", reflect.TypeOf((*MockBanProcessor)(nil).IsBanned), ctx, id)
}

// Unban mocks base method.
func (m *MockBanProcessor) Unban(ctx context.Context, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unban", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unban indicates an expected call of Unban.
func (mr *MockBanProcessorMockRecorder) Unban(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unban", reflect.TypeOf((*MockBanProcessor)(nil).Unban), ctx, id)
}
