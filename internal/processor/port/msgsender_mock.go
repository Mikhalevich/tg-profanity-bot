// Code generated by MockGen. DO NOT EDIT.
// Source: internal/processor/port/msgsender.go
//
// Generated by this command:
//
//	mockgen -source=internal/processor/port/msgsender.go -destination=internal/processor/port/msgsender_mock.go -package=port
//

// Package port is a generated GoMock package.
package port

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockMsgSender is a mock of MsgSender interface.
type MockMsgSender struct {
	ctrl     *gomock.Controller
	recorder *MockMsgSenderMockRecorder
	isgomock struct{}
}

// MockMsgSenderMockRecorder is the mock recorder for MockMsgSender.
type MockMsgSenderMockRecorder struct {
	mock *MockMsgSender
}

// NewMockMsgSender creates a new mock instance.
func NewMockMsgSender(ctrl *gomock.Controller) *MockMsgSender {
	mock := &MockMsgSender{ctrl: ctrl}
	mock.recorder = &MockMsgSenderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMsgSender) EXPECT() *MockMsgSenderMockRecorder {
	return m.recorder
}

// Edit mocks base method.
func (m *MockMsgSender) Edit(ctx context.Context, originMsgInfo MessageInfo, msg string, options ...Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, originMsgInfo, msg}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Edit", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Edit indicates an expected call of Edit.
func (mr *MockMsgSenderMockRecorder) Edit(ctx, originMsgInfo, msg any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, originMsgInfo, msg}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Edit", reflect.TypeOf((*MockMsgSender)(nil).Edit), varargs...)
}

// Reply mocks base method.
func (m *MockMsgSender) Reply(ctx context.Context, originMsgInfo MessageInfo, msg string, options ...Option) error {
	m.ctrl.T.Helper()
	varargs := []any{ctx, originMsgInfo, msg}
	for _, a := range options {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Reply", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reply indicates an expected call of Reply.
func (mr *MockMsgSenderMockRecorder) Reply(ctx, originMsgInfo, msg any, options ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, originMsgInfo, msg}, options...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reply", reflect.TypeOf((*MockMsgSender)(nil).Reply), varargs...)
}
