// Code generated by MockGen. DO NOT EDIT.
// Source: internal/processor/port/rankings.go
//
// Generated by this command:
//
//	mockgen -source=internal/processor/port/rankings.go -destination=internal/processor/port/rankings_mock.go -package=port
//

// Package port is a generated GoMock package.
package port

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRankings is a mock of Rankings interface.
type MockRankings struct {
	ctrl     *gomock.Controller
	recorder *MockRankingsMockRecorder
	isgomock struct{}
}

// MockRankingsMockRecorder is the mock recorder for MockRankings.
type MockRankingsMockRecorder struct {
	mock *MockRankings
}

// NewMockRankings creates a new mock instance.
func NewMockRankings(ctrl *gomock.Controller) *MockRankings {
	mock := &MockRankings{ctrl: ctrl}
	mock.recorder = &MockRankingsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRankings) EXPECT() *MockRankingsMockRecorder {
	return m.recorder
}

// AddScore mocks base method.
func (m *MockRankings) AddScore(ctx context.Context, key, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddScore", ctx, key, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddScore indicates an expected call of AddScore.
func (mr *MockRankingsMockRecorder) AddScore(ctx, key, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddScore", reflect.TypeOf((*MockRankings)(nil).AddScore), ctx, key, userID)
}

// Top mocks base method.
func (m *MockRankings) Top(ctx context.Context, key string) ([]RankingUserScore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Top", ctx, key)
	ret0, _ := ret[0].([]RankingUserScore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Top indicates an expected call of Top.
func (mr *MockRankingsMockRecorder) Top(ctx, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Top", reflect.TypeOf((*MockRankings)(nil).Top), ctx, key)
}
